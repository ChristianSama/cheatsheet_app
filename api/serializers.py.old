from rest_framework import serializers
from .models import Cheatsheet, Section, Line
import pdb

class LineSerializer(serializers.ModelSerializer):
    class Meta:
        model = Line
        fields = "__all__"

class SectionSerializer(serializers.ModelSerializer):
    lines = LineSerializer(many=True, required=False)

    def create(self, validated_data):
        lines_data = validated_data.pop('lines')
        section = Section.objects.create(**validated_data) # missing cheatsheet?
        for line in lines_data:
            Line.objects.create(section=section, **line)
        return section

    class Meta:
        model = Section
        fields = "__all__"

class CheatsheetSerializer(serializers.ModelSerializer):
    sections = SectionSerializer(many=True, required=False)

    class Meta:
        model = Cheatsheet
        fields = "__all__"

    def create(self, validated_data):
        ssections = validated_data.pop("sections")
        cheatsheet_instance = Cheatsheet.objects.create(**validated_data)
        for section in ssections:
            # need to pop lines field as well: https://stackoverflow.com/questions/74724918/django-nested-serializers-direct-assignment-to-the-reverse-side-of-a-related-s
            lines_data = section.pop("lines")
            section_instance = Section.objects.create(cheatsheet=cheatsheet_instance, **section)
            for line in lines_data:
                Line.objects.create(section=section_instance, **line)
        return cheatsheet_instance

    def update(self, instance, validated_data):
        instance.title = validated_data.get("title")
        instance.description = validated_data.get("description")
        instance.score = validated_data.get("score")
        instance.save()

        pdb.set_trace()

        sections = validated_data.pop("sections", [])

        current_section_ids = Section.objects.filter(cheatsheet=instance.pk).values_list("id", flat=True)

        section_ids_pool = [] #sections to keep

        pdb.set_trace()

        for section in sections:
            line_ids_pool = []
            if "id" in section.keys():
                if section['id'] in current_section_ids:
                    section_instance = Section.objects.get(id=section['id'])
                    section_instance.title = section.get('title', section_instance.title)
                    section_instance.description = section.get('description', section_instance.description)
                    section_instance.save()

                    pdb.set_trace()

                    #update lines
                    #TODO: check with section without lines
                    for line in section['lines']:
                        if "id" in line.keys():
                            #update existing line
                            if Line.objects.filter(id=line['id']).exists():
                                line_instance = Line.objects.get(id=line['id'])
                                line_instance.description = line.get('description', line_instance.description)
                                line_instance.snippet = line.get('snippet', line_instance.snippet)
                                line_instance.save()
                                line_ids_pool.append(line_instance.id)
                        else:
                            #create new line
                            new_line = Line.objects.create(section=section, **line)
                            line_ids_pool.append(new_line.id)

                    section_ids_pool.append(section_instance.id)
            else:
                #create lines here too?
                lines_data = section.pop("lines")
                new_section = Section.objects.create(cheatsheet=instance, **section)
                for line in lines_data:
                    Line.objects.create(section=new_section, **line)
                section_ids_pool.append(new_section.id)

        if sections:
            #do this for lines too
            for section_id in current_section_ids:
                if section_id not in section_ids_pool:
                    Section.objects.filter(pk=section_id).delete()

        return instance
        